#!@! shell functions
if [[ `which debug` == "debug not found" ]]; then
    set_debug()
    {
        unset DEBUG
        test -f $HOME/.debug && export DEBUG=true
    }
    debug()
    {
        [[ $DEBUG ]] && echo $FILE
    }
    set_debug
fi
debug

# -----------------------------------------------------------------------------
# Check for a function
#
if [[ `which safe_unset` != "safe_unset not found" ]]; then
   unset -f safe_unset
fi
safe_unset()
{
    if [[ `which $1` != "$1 not found" ]]; then
        unset -f $1
    fi
}

# -----------------------------------------------------------------------------
# Activate a virtual environment
#
safe_unset activate
activate()
{
    . $HOME/venv/$1/bin/activate
}

# ---------------------------------------------------------------------------
# Add an element to a -PATH variable if it's not already present
#
safe_unset add_once
function add_once() 
{
   local NAME=$1
   local STRING=$2
   local WHERE=${3:-"before"}
   eval "local VAL=\$$NAME"
   [[ $VAL =~ (^|:)${STRING}(:|$) ]] && return

   if [[ "$VAL" == "" ]]; then
      export $NAME=$STRING
   elif [[ "$WHERE" == "after" ]]; then
      export $NAME=${VAL}:${STRING}
   else
      export $NAME=${STRING}:${VAL}
   fi
}

# ---------------------------------------------------------------------------
# Remove an element from a -PATH variable if present
#
safe_unset path_rm
function path_rm()
{
    autoload -U regexp-replace
    local NAME=$1
    local STRING=$2
    regexp-replace $NAME ":?$STRING:?" ':'
    regexp-replace $NAME '(^:|:$)' ''
}

# ---------------------------------------------------------------------------
# Source a file if it exists
#
safe_unset csource
function csource()
{
   if [ -e $1 ]; then
      . $1
   fi
}

# ---------------------------------------------------------------------------
# return the most recent match
#
safe_unset latest
function latest()
{
   ls -1td "$1" | head -1
}

# ---------------------------------------------------------------------------
# Edit a file and then source it
#
safe_unset resource
function resource()
{
   $EDITOR $1
   csource $1
}

# ---------------------------------------------------------------------------
# attach to the most appropriate tmux session
#
safe_unset tm
function tm()
{
    if [[ "$COLUMNS" -lt 150 ]]; then
        tmux a -t top
    else
        tmux a -t wide
    fi
}

safe_unset setaliases
safe_unset cdd
safe_unset conditional_swtools_module_load
safe_unset dbgmsg
safe_unset hostbug
